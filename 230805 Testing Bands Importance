{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15852,"status":"ok","timestamp":1690933148991,"user":{"displayName":"Akib Javed","userId":"01752818298668219500"},"user_tz":-480},"id":"Z6TIrQbgd_Oj","outputId":"410d1755-7547-44e8-f9c5-ef250772bfe8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"output_embedded_package_id":"1lu-ABU8B65My41LhMWfphH9t2hc69skz"},"id":"IVb-BxJvXDPS","outputId":"683f4897-613e-4902-ab31-aa9fc3470afd"},"outputs":[],"source":["import pandas as pd\n","data = pd.read_csv('/content/merged_b30.csv')\n","\n","X_for_plot = data.drop(['system:index', '.geo','Class'], axis=1) # , 'Class'\n","df = pd.DataFrame(X_for_plot)\n","corr_matrix = df.corr()\n","import seaborn as sn\n","import matplotlib.pyplot as plt\n","plt.figure(figsize=(20, 16), dpi=120)\n","sn.heatmap(corr_matrix, annot=False, cmap='plasma')\n","plt.show()\n","\n","print('training dataset shape', X_for_plot.shape)\n","print('X.columns.tolist()', X_for_plot.columns.tolist())"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25470,"status":"ok","timestamp":1691661864322,"user":{"displayName":"Akib Javed","userId":"01752818298668219500"},"user_tz":-480},"id":"SMWZ-l5LsqdO","outputId":"9cfbba2a-cf36-4d13-9f10-6f3bd5f3cd8b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Random forest accuracy: 1.0\n","HH 0.001768142141907986\n","HH_asm 0.00032003193091440136\n","HH_contrast 0.00023617328812819343\n","HH_corr 0.00044766924791050846\n","HH_dent 0.0003234944380715098\n","HH_diss 0.00026359400250876904\n","HH_dvar 0.00030736956988613475\n","HH_ent 0.00028004151669232133\n","HH_idm 0.0003026360224944322\n","HH_imcorr1 0.00036356034011122447\n","HH_imcorr2 0.00030115562588572373\n","HH_inertia 0.00028416502029891355\n","HH_maxcorr 0.0\n","HH_prom 0.00031435814020922844\n","HH_savg 0.02053026172480183\n","HH_sent 0.0002693383198809306\n","HH_shade 0.0003478494085680534\n","HH_svar 0.0002736509802143399\n","HH_var 0.0002894573329357073\n","HV 0.024899418134173294\n","HV_asm 0.0003666898843633227\n","HV_contrast 0.00026237616323840574\n","HV_corr 0.00047903172472195263\n","HV_dent 0.00026285309219115576\n","HV_diss 0.0002059145819588981\n","HV_dvar 0.00031105963869549735\n","HV_ent 0.00035870666228462675\n","HV_idm 0.0002972852132331592\n","HV_imcorr1 0.00027846296141860834\n","HV_imcorr2 0.0003504258000474905\n","HV_inertia 0.0002846120744725783\n","HV_maxcorr 0.0\n","HV_prom 0.00029649523801935496\n","HV_savg 0.024999544003781984\n","HV_sent 0.0004081161304029567\n","HV_shade 0.000373156162899298\n","HV_svar 0.0003255904504258562\n","HV_var 0.0003096185971845627\n","L8_aerosols 0.006490084307077347\n","L8_blue 0.01925117871352764\n","L8_green 0.0012080810533914984\n","L8_nir 0.01516433062553892\n","L8_red 0.018504972690047285\n","L8_swir1 0.0356154486919953\n","L8_swir2 0.0431205118755129\n","VH 0.03015456924115528\n","VH_asm 0.003617548151539003\n","VH_contrast 0.0020995517467784536\n","VH_corr 0.0005702349039319367\n","VH_dent 0.005364511836806571\n","VH_diss 0.001444143761945587\n","VH_dvar 0.0020200963406018613\n","VH_ent 0.0029497241933511735\n","VH_idm 0.007795023047131311\n","VH_imcorr1 0.0005276702892207508\n","VH_imcorr2 0.0007991874881425208\n","VH_inertia 0.008726656569435862\n","VH_maxcorr 0.0\n","VH_prom 0.000738093919557789\n","VH_savg 0.030780801147132882\n","VH_sent 0.00176097625633522\n","VH_shade 0.001125701332537723\n","VH_svar 0.0012553109052107398\n","VH_var 0.0022370909913064494\n","VV 0.017724112837919356\n","VV_asm 0.009138547881881178\n","VV_contrast 0.02872214167902165\n","VV_corr 0.0005454410662311534\n","VV_dent 0.02180669107167163\n","VV_diss 0.029132799130095227\n","VV_dvar 0.013137760608478337\n","VV_ent 0.017922175129673996\n","VV_idm 0.010215382939013458\n","VV_imcorr1 0.0007601745895461061\n","VV_imcorr2 0.0066872386983797836\n","VV_inertia 0.024033673819467485\n","VV_maxcorr 0.0\n","VV_prom 0.0036186580084710865\n","VV_savg 0.04373138727635496\n","VV_sent 0.006053243583162244\n","VV_shade 0.001014132911091744\n","VV_svar 0.004820422403720917\n","VV_var 0.006514437743399131\n","indbiMax 0.0016304957602765251\n","indbiMedian 0.013141920117906703\n","mndwiMax 0.005095281068227595\n","mndwiMedian 0.04518276611544352\n","mndwiSD 0.0008103809910024045\n","ndbiMedian 0.007875999298224726\n","ndbiMin 0.0025533103788254194\n","ndbiSD 0.0009696356060206799\n","nduiMedian 0.03150639044240339\n","nduiMin 0.005193329491883719\n","nduiSD 0.0012540810939852362\n","ndviMax 0.03948553762425097\n","ndviMedian 0.025618974544252066\n","ndviSD 0.0013823836556563953\n","s2_aerosols 0.023737643359281965\n","s2_blue 0.010186588691553285\n","s2_green 0.0018229650709993685\n","s2_nir 0.012186222036022196\n","s2_red 0.0044522729419880554\n","s2_redEdge1 0.0019483078339849666\n","s2_redEdge2 0.02241630070552454\n","s2_redEdge3 0.016711681667260298\n","s2_redEdge4 0.03343671739539035\n","s2_swir1 0.0385129698375741\n","s2_swir2 0.03770985661063454\n","s2_waterVapor 0.02446658415448046\n","swiRedMedian 0.00882128080901592\n","viirs 0.010697895676205903\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import RandomForestClassifier\n","\n","  # Load data\n","data = pd.read_csv('/content/merged (1).csv')\n","\n","# Split the data into features (X) and labels (y)\n","# X = data.drop('Class', axis=1)\n","X = data.drop(['system:index','.geo','Class'], axis=1)\n","y = data['Class']\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# # Try different values of n_estimators and compute accuracy for each value\n","# n_estimators_list = range(1, 101)\n","# print(data.shape)\n","# print(X.shape)\n","\n","# Train model\n","rf = RandomForestClassifier(n_estimators=131, random_state=42).fit(X, y)\n","\n","# Predict the labels of the testing set using the random forest model\n","y_pred_rf = rf.predict(X_test)\n","\n","# Evaluate the accuracy of the random forest model\n","accuracy_rf = accuracy_score(y_test, y_pred_rf)\n","print('Random forest accuracy:', accuracy_rf)\n","\n","# Print feature importances\n","importances = rf.feature_importances_\n","feature_names = X.columns\n","for feature_name, importance in zip(feature_names, importances):\n","    print(feature_name, importance)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16456,"status":"ok","timestamp":1690937647025,"user":{"displayName":"Akib Javed","userId":"01752818298668219500"},"user_tz":-480},"id":"TwRov9ciwGFS","outputId":"4d66637b-18f0-436e-8f76-7493af5abb1d"},"outputs":[{"name":"stdout","output_type":"stream","text":["RVI 0.06478703215012599\n","SR_B1 0.05749818850444068\n","SR_B2 0.0375833408734942\n","SR_B3 0.017858799505846675\n","SR_B4 0.03814502457249617\n","SR_B5 0.025396640808304827\n","SR_B6 0.023645849043959173\n","SR_B7 0.04252937457304427\n","aerosols 0.08947917475505637\n","avg_rad 0.2454226228470441\n","blue 0.019551849328276805\n","elevation 0.01633044427743041\n","mndwiMedian 0.026054262016538828\n","ndbiSD 0.013707187629877271\n","nduiMin 0.03713767754301788\n","nduiSD 0.031810720289602995\n","ndviMax 0.014189011675472\n","ndviSD 0.011326278261435783\n","nir 0.009903897425036716\n","red 0.009987176579544912\n","redEdge2 0.013857243087735747\n","redEdge3 0.01835242745754822\n","redEdge4 0.032302166676595766\n","swir1 0.017882923631797595\n","swir2 0.017601965105824593\n","waterVapor 0.06765872138045205\n"]}],"source":["# import pandas as pd\n","# from sklearn.ensemble import RandomForestClassifier\n","\n","# # Load data\n","# data = pd.read_csv('/content/15city40kSample.csv')\n","# X = data.drop(['ndbiMin', 'ST_B10', 'redEdge1', 'ndviMedian', 'swiRedMedian', 'ndbiMedian', 'indbiMax', 'nduiMedian', 'slope', 'indbiMedian', 'mndwiSD', 'mndwiMax', 'green','system:index','.geo','Class'], axis=1)\n","# y = data['Class']\n","\n","# # Train model\n","# rf = RandomForestClassifier(n_estimators=67, random_state=42).fit(X, y)\n","\n","# # Print feature importances\n","# importances = rf.feature_importances_\n","# feature_names = X.columns\n","# for feature_name, importance in zip(feature_names, importances):\n","#     print(feature_name, importance)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7594,"status":"ok","timestamp":1690919812754,"user":{"displayName":"Akib Javed","userId":"01752818298668219500"},"user_tz":-480},"id":"qO7okfeP7tT_","outputId":"84b48c73-71b4-43bf-ee18-37d56f57c56f"},"outputs":[{"name":"stdout","output_type":"stream","text":["RandomForestClassifier accuracy: 0.9918367346938776\n","AdaBoostClassifier accuracy: 0.9897959183673469\n","GradientBoostingClassifier accuracy: 0.9918367346938776\n","XGBClassifier accuracy: 0.9938775510204082\n","VotingClassifier accuracy: 0.9938775510204082\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, VotingClassifier\n","from xgboost import XGBClassifier\n","\n","# Load data\n","data = pd.read_csv('/content/drive/MyDrive/ELM/tokyo13_39_Updated.csv')\n","X = data.drop([,'Class'], axis=1)\n","y = data['Class']\n","\n","# Split data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Train base models\n","rf = RandomForestClassifier(n_estimators=50, random_state=42).fit(X_train, y_train)\n","ada = AdaBoostClassifier(n_estimators=14, random_state=42).fit(X_train, y_train)\n","gb = GradientBoostingClassifier(n_estimators=80, random_state=42).fit(X_train, y_train)\n","xgb = XGBClassifier(n_estimators=30, random_state=42).fit(X_train, y_train)\n","\n","# Create ensemble model\n","ensemble = VotingClassifier(estimators=[('rf', rf), ('ada', ada), ('xgb', xgb), ('gb', gb)], voting='hard')\n","ensemble.fit(X_train, y_train)\n","\n","# Evaluate models\n","for model in [rf, ada, gb, xgb, ensemble]:\n","  y_pred = model.predict(X_test)\n","  acc = accuracy_score(y_test, y_pred)\n","  print(model.__class__.__name__, 'accuracy:', acc)"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyPQVo4YhEGyCKhg6JS/7ycl","mount_file_id":"14aMlnaP1qj1sbaXLVzug1UGFQhDxjIVi","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}